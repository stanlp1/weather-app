{"version":3,"sources":["Services/weatherApi.js","components/WeatherDayCard.jsx","components/Weather.jsx","index.js","components/Weather.module.css","components/WeatherDayCard.module.css"],"names":["API_KEY","process","console","log","getLatLon","city","a","url","URL","searchParams","append","fetch","response","json","jsonResponse","getWeatherFromCoord","lat","lon","cityFromCoord","name","WeatherDayCard","selected","setSelected","dayWeather","dt","day","Date","toLocaleString","weekday","onClick","className","Styles","alt","weather","description","src","icon","Math","round","temp","max","min","Weather","useState","setCity","currentCity","setCurrentCity","selectedWeather","setSelectedWeather","setWeather","useEffect","then","coord","weatherData","current","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","onKeyDown","e","code","preventDefault","target","value","placeholder","month","daily","map","index","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.328078a6.chunk.js","sourcesContent":["const API_KEY = process.env.REACT_APP_WEATHERAPIKEY;\r\nconsole.log(API_KEY);\r\n\r\nconst getLatLon = async (city) => {\r\n    let url = new URL(\"https://api.openweathermap.org/data/2.5/weather\");\r\n    url.searchParams.append(\"q\", city);\r\n    url.searchParams.append(\"appid\", API_KEY);\r\n    url.searchParams.append(\"units\", \"imperial\");\r\n\r\n    const response = await fetch(url);\r\n    const jsonResponse = await response.json();\r\n    console.log(jsonResponse);\r\n    return jsonResponse;\r\n}\r\n\r\nconst getWeatherFromCoord = async (lat, lon) => {\r\n    let url = new URL(\"https://api.openweathermap.org/data/2.5/onecall\");\r\n    url.searchParams.append(\"lat\", lat);\r\n    url.searchParams.append(\"lon\", lon);\r\n    url.searchParams.append(\"exclude\", \"minutely\");\r\n    url.searchParams.append(\"appid\", API_KEY);\r\n    url.searchParams.append(\"units\", \"imperial\");\r\n\r\n    const response = await fetch(url);\r\n    const jsonResponse = await response.json();\r\n    return jsonResponse;\r\n}\r\n\r\nconst cityFromCoord = async (lat ,lon) => {\r\n    let url = new URL(\"https://api.openweathermap.org/data/2.5/weather\");\r\n    url.searchParams.append(\"lat\", lat);\r\n    url.searchParams.append(\"lon\", lon);\r\n    url.searchParams.append(\"appid\", API_KEY);\r\n    url.searchParams.append(\"units\", \"imperial\");\r\n\r\n    const response = await fetch(url);\r\n    const jsonResponse = await response.json();\r\n    return jsonResponse.name;\r\n}\r\n\r\nconst getCityWeather = async (city) => {\r\n    const [lon, lat] = await getLatLon(city);\r\n    return getWeatherFromCoord(lat, lon);\r\n}\r\n\r\n\r\nexport {getLatLon, getWeatherFromCoord, getCityWeather, cityFromCoord};","import Styles from \"./WeatherDayCard.module.css\";\r\n\r\n\r\nlet WeatherDayCard = ({selected, setSelected, dayWeather}) => {\r\n    console.log(dayWeather.dt);\r\n    const date = new Date (dayWeather.dt * 1000);\r\n    const day = date.toLocaleString('en-US', {weekday: 'short'});\r\n    console.log(dayWeather);\r\n    return (\r\n        <div onClick={ () => setSelected(dayWeather)} className={`${Styles['card-container']} ${selected && Styles['card-selected']}`}>\r\n            <span className={Styles['card-day-heading']}>{day}</span>\r\n            <img className={Styles['card-icon']} alt={dayWeather.weather[0].description} src={`http://openweathermap.org/img/wn/${dayWeather.weather[0].icon}@4x.png`} />\r\n            <div className={Styles['card-temp-footer']}>\r\n                <h3>{Math.round(dayWeather.temp.max)}°</h3>\r\n                <h5>{Math.round(dayWeather.temp.min)}°</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherDayCard;","import { useEffect, useState } from \"react\";\r\nimport { cityFromCoord, getLatLon, getWeatherFromCoord } from \"../Services/weatherApi\";\r\nimport Styles from \"./Weather.module.css\";\r\nimport WeatherDayCard from \"./WeatherDayCard\";\r\n\r\nlet Weather = () => {\r\n    const [city, setCity] = useState(\"Beverly hills\");\r\n    const [currentCity, setCurrentCity] = useState(\"Beverly Hils\");\r\n    const [selectedWeather, setSelectedWeather] = useState();\r\n    const [weather, setWeather] = useState();\r\n\r\n    useEffect(() => {\r\n        getLatLon(city)\r\n                .then( (jsonResponse) => {\r\n                    setCurrentCity(jsonResponse.name);\r\n                    getWeatherFromCoord(jsonResponse.coord.lat, jsonResponse.coord.lon).then( (weatherData) =>{\r\n                        setSelectedWeather(weatherData.current);\r\n                        setWeather(weatherData);});\r\n                });\r\n    }, [city]);\r\n    \r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition( (position) => {\r\n            cityFromCoord(position.coords.latitude, position.coords.longitude).then((name) => setCurrentCity(name));\r\n            getWeatherFromCoord(position.coords.latitude, position.coords.longitude).then( (weatherData) =>{\r\n                setSelectedWeather(weatherData.current);\r\n                setWeather(weatherData);\r\n            });\r\n        });\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={Styles['app-container']}>\r\n            <input onKeyDown={(e) => {\r\n                if (e.code === \"Enter\")\r\n                {\r\n                    console.log(\"Test\");  \r\n                    e.preventDefault();\r\n                    setCity(e.target.value);\r\n                }\r\n            }} placeholder=\"Search City\" className={Styles['city-input']} />\r\n            {weather && \r\n            <div className={Styles['weather-header']}>\r\n                <div className={Styles['weather-header-temp']}>\r\n                <img alt={selectedWeather.weather[0].description} src={`https://openweathermap.org/img/wn/${selectedWeather.weather[0].icon}@4x.png`}/>\r\n                <span className={Styles['current-weather-temp']}>{typeof selectedWeather.temp === 'object' ? Math.round(selectedWeather.temp.max)  : Math.round(selectedWeather.temp)}°</span>\r\n                </div>\r\n                <div className={Styles['weather-header-info']}>\r\n                    <div className={Styles['current-city']}>{currentCity}</div>\r\n                    <div className={Styles['current-day']}>{new Date (selectedWeather.dt * 1000).toLocaleString('en-US', {month: \"long\", day: \"numeric\", weekday: \"long\"})}</div>\r\n                    <div className={Styles['current-weather-description']}> {selectedWeather.weather[0].description} </div>\r\n                </div>\r\n            </div>}\r\n            <body>\r\n                <div className={Styles['card-container']}>\r\n                {weather && weather.daily.map( (day, index) => <WeatherDayCard key={index} selected={day === selectedWeather} setSelected={setSelectedWeather} dayWeather={day}/>)}\r\n                </div>\r\n            </body>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Weather from './components/Weather';\nimport './index.css';\nimport './Services/weatherApi'\n\nReactDOM.render(\n  <React.StrictMode>\n     <Weather></Weather>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather-header\":\"Weather_weather-header__24dNK\",\"weather-header-temp\":\"Weather_weather-header-temp__xUvyM\",\"weather-header-info\":\"Weather_weather-header-info__HbykI\",\"current-weather-temp\":\"Weather_current-weather-temp__3spM7\",\"current-city\":\"Weather_current-city__1OaJn\",\"current-day\":\"Weather_current-day__1E_nt\",\"current-weather-description\":\"Weather_current-weather-description__yacJl\",\"card-container\":\"Weather_card-container__2AVWF\",\"city-input\":\"Weather_city-input__1vxLI\",\"app-container\":\"Weather_app-container__10QzF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card-container\":\"WeatherDayCard_card-container__2zrzU\",\"card-day-heading\":\"WeatherDayCard_card-day-heading__1OFQw\",\"card-temp-footer\":\"WeatherDayCard_card-temp-footer__3DG4s\",\"card-selected\":\"WeatherDayCard_card-selected__2s0ZX\",\"card-icon\":\"WeatherDayCard_card-icon__27mWm\"};"],"sourceRoot":""}